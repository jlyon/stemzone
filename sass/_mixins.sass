//***********************************
// Sprite Definitions
//
// Create folder in images/ called icons/ place any .png files in there,
// and reference them by their file name
//***********************************

@import "compass/utilities/sprites/base"

$disable-magic-sprite-selectors: true

// Use these lines for traditional compass sprites
// see http://compass-style.org/help/tutorials/spriting/
//@import "icons/*.png";

//@include all-icons-sprites;

// Use this style for sprites inside media queries
// for use with +get-sprite() mixin
$sprites: sprite-map("sprites/*.png")



// http://compass-style.org/reference/compass/helpers/sprites/
@mixin get-sprite($map, $sprite, $offset-x: 0, $offset-y: 0, $repeat: no-repeat, $height: true, $width: true, $hover: false)
  //http://compass-style.org/reference/compass/helpers/sprites/#sprite-file
  $sprite-image: sprite-file($map, $sprite)

  // http://compass-style.org/reference/compass/helpers/sprites/#sprite-url
  $sprite-map: sprite-url($map)

  // http://compass-style.org/reference/compass/helpers/sprites/#sprite-position
  $sprite-position: sprite-position($map, $sprite, $offset-x, $offset-y)

  // Returns background
  background: $sprite-map $sprite-position $repeat

  // http://compass-style.org/reference/compass/helpers/image-dimensions/
  // Checks to see if the user wants height returned
  @if $height == true
    // Gets the height of the sprite-image
    $sprite-height: image-height($sprite-image)
    // Returns the height
    height: $sprite-height

  // http://compass-style.org/reference/compass/helpers/image-dimensions/
  // Checks to see if the user wants height returned
  @if $width == true
    // Gets the height of the sprite-image
    $sprite-width: image-width($sprite-image)
    // Returns the width
    width: $sprite-width


  @if $hover
    $sprite-image: sprite-file($map, $hover)

    // http://compass-style.org/reference/compass/helpers/sprites/#sprite-url
    $sprite-map: sprite-url($map)

    // http://compass-style.org/reference/compass/helpers/sprites/#sprite-position
    $sprite-position: sprite-position($map, $hover, $offset-x, $offset-y)

    &:hover, &:focus
      // Returns background
      background: $sprite-map $sprite-position $repeat


// shortcut for sprites
@mixin s-image($sprite, $offset-x: 0, $offset-y: 0, $repeat: no-repeat, $height: true, $width: true, $hover: false)
  +get-sprite($sprites, $sprite, $offset-x, $offset-y, $repeat, $height, $width, $hover)

// shortcut for hover images
@mixin s-image-hover($sprite, $hover: "#{$sprite}-hover")
  +s-image($sprite, 0, 0, no-repeat, true, true, $hover)

@mixin link-style
  cursor: pointer

  &:hover, &:active, &:focus
    opacity: 0.9

@mixin s-replace($sprite, $link: false)
  +s-image($sprite, 0, 0, no-repeat, true, true)
  display: inline-block
  overflow: hidden
  text-indent: -9000px

  @if $link
    +link-style




//***********************************
// Fonts
//
//***********************************

@mixin font-normal
  font-family: $font

@mixin font-alt
  font-family: $font-alt


//***********************************
// Helpers
//
//***********************************


@mixin before-as-image($display: block, $direction: false, $amount: 0)
  content: ""
  display: $display

  @if $direction
    #{$direction}: $amount
    position: absolute

// simple list clear, does not assume
@mixin list-clear-light()
  list-style: none
  padding: 0
  margin: 0

// simple list float, does not assume
@mixin list-float-light()
  +list-clear-light()

  li
    display: inline-block
    float: left

@mixin div-center($light: false)
  margin-right: auto
  margin-left: auto
  @if $light
    display: block
  @else 
    display: block!important

@mixin elevate()
  position: relative
  z-index: 1

@mixin hide-front
  .front &
    display: none

@mixin show-front
  display: none

  .front &
    display: block